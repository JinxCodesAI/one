# Docker Compose for Production Environment
# Complete deployment setup for jinxcodes.ai applications

version: "3.8"

services:
  # Reverse Proxy - Routes traffic to appropriate services
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # For SSL certificates (if needed)
    depends_on:
      - todo-app
      - ai-chat
      - profile-service
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Internal Services (not exposed externally)
  ai-api:
    build:
      context: .
      dockerfile: internal/ai-api/Dockerfile.prod
    environment:
      - NODE_ENV=production
      - PORT=8000
      - HOST=0.0.0.0
    env_file:
      - internal/ai-api/.env.prod
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  profile-service:
    build:
      context: .
      dockerfile: internal/profile-service/Dockerfile.prod
    environment:
      - NODE_ENV=production
      - PROFILE_SERVICE_PORT=8081
      - CORS_ORIGINS=https://todoapp.jinxcodes.ai,https://aichat.jinxcodes.ai
      - COOKIE_DOMAIN=.jinxcodes.ai
    env_file:
      - internal/profile-service/.env.prod
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Applications (exposed via nginx)
  todo-app:
    build:
      context: .
      dockerfile: web/todo-app/Dockerfile.prod
    environment:
      - NODE_ENV=production
      - PORT=3000
      - AI_API_HOST=ai-api
      - AI_API_PORT=8000
      - PROFILE_SERVICE_HOST=profile-service
      - PROFILE_SERVICE_PORT=8081
    depends_on:
      ai-api:
        condition: service_healthy
      profile-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ai-chat:
    build:
      context: .
      dockerfile: web/ai-chat/Dockerfile.prod
    environment:
      - NODE_ENV=production
      - PORT=3000
      - AI_API_HOST=ai-api
      - AI_API_PORT=8000
    depends_on:
      ai-api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Database for profile service (uncomment if needed)
  # postgres:
  #   image: postgres:15-alpine
  #   environment:
  #     POSTGRES_DB: profile_service
  #     POSTGRES_USER: ${POSTGRES_USER:-profile_user}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-profile_password}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   restart: unless-stopped
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-profile_user} -d profile_service"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

networks:
  app-network:
    driver: bridge

# volumes:
#   postgres_data:
